Some short-term goals
---------------------

1. Introduce an input event abstraction

Currently we just dump SDL events directly into a stream; we should create
an enumeration that gathers together various things we care about putting
into the network, so they can be present in the same stream. E.g.,
    * Keyboard input
    * Mouse movement / clicks
    * Time deltas?

XXX: not sure about including time deltas there; we'd prefer to not use
deltas for anything except generating the timestream.


2. Move editor GUI to a separate module

Create an interface that just exposes the relevant streams and signals;
should allow a fairly elegant decoupling of GUI from the main loop. Probably
depends on #1, or at least having mouse events in carboxyl.


3. Move audio to a separate module, add basic mixing interface


4. Greenfield a new FRP physics approach. Probably put momentum first.

Our first-order abstraction for physics entities will be a pair of signals,
momentum and position. (We can assume that in this system, σₓσₛ≠ħ/2) In the
normal course of things, position should be straightforwardly derived from
momentum. We'll implement just two momentum functions at first: constant,
and keyboard-controlled.

This should (hopefully) make it a bit easier to implement collision detection
in terms of momentum and position signals.
